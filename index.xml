<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Farmer</title><link>https://compositionalit.github.io/farmer/</link><description>Recent content on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 04 Feb 2020 00:36:21 +0100</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/index.xml" rel="self" type="application/rss+xml"/><item><title>Generating templates</title><link>https://compositionalit.github.io/farmer/api-overview/template-generation/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/template-generation/</guid><description>Farmer supports several ways to &amp;ldquo;output&amp;rdquo; ARM templates.
Generating JSON as a string You can generate an ARM template as a plain string:
let json = deployment.Template |&amp;gt; Writer.toJson // prints out the JSON printfn &amp;#34;%s&amp;#34; json Writing to a file You can write out the ARM template directly to a file, from which you can then deploy to Azure using whichever mechanism you already use e.g. Azure CLI, Powershell, REST API etc.</description></item><item><title>App Insights</title><link>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</guid><description>Overview The App Insights builder is used to create Application Insights accounts. Use this if you need a standalone AI instance; if you need one for a web app, the web app will create one by default and configure the application settings automatically.
Application Insights (Microsoft.Insights/components) Builder Keywords Keyword Purpose name Sets the name of the App Insights instance. Configuration Members Member Purpose InstrumentationKey Gets the ARM expression path to the instrumentation key of this App Insights instance.</description></item><item><title>ARM Deployment</title><link>https://compositionalit.github.io/farmer/api-overview/resources/arm/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/arm/</guid><description>Overview The ARM deployment builder is always the top-level element of your deployment. It contains the manifest of all Farmer resources that you create.
Builder Keywords Keyword Purpose location Sets the default location of all resources. add_resource Adds a resource to the template. add_resources Adds a collection of resources to the template. output Creates an output value that will be returned by the ARM template.</description></item><item><title>Your first Farmer template</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</guid><description>Introduction In this exercise, you&amp;rsquo;ll:
create a web application with a fully-configured Application Insights instance create an ARM deployment object and assign the web app to it generate an ARM template Creating a Farmer app Create an F# console application using the .NET SDK and add the Farmer package in an empty directory:
dotnet new console -lang F# dotnet add package Farmer Farmer also has a .NET template to get started even more quickly!</description></item><item><title>1. The Farmer Pipeline</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/1-the-farmer-pipline/</guid><description>This step will get you up and running by incorporate something quickly and easily into the Farmer pipeline that emits a valid Azure Container Registry.
Step 1.1: Prototype and test using an fsx file Technically this step is not necessary but it is the quickest way to get a working deployment from which you can iterate upon.
Start by looking at this sample and identifying the section of JSON that relates to the resource we want - in our case, the Microsoft.</description></item><item><title>ARM Basics</title><link>https://compositionalit.github.io/farmer/contributing/arm-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/arm-basics/</guid><description>Skip this section if you are already familiar with ARM Templates
This won&amp;rsquo;t be an introduction to Azure Resource Manager or ARM templates. Instead let&amp;rsquo;s go through the main parts that are important for creating a new resource.
The main parts of ARM Templates can be broken into resources, outputs, variables, and parameters. Farmer has limited support for parameters and no support for variables, so we will not cover them.</description></item><item><title>Working with multiple resources</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</guid><description>Introduction In this quickstart, you&amp;rsquo;ll expand on the deployment authored in the previous quickstart as follows:
add an Azure storage account add an application setting to the web app that references the storage account&amp;rsquo;s key set a dependency between the two resources Creating a storage account Create a storage account by using the storageAccount builder.
let myStorage = storageAccount { name &amp;#34;yourfirststorage&amp;#34; } Azure Storage Account names must be globally unique and between 3-24 alphanumeric lower-case characters:</description></item><item><title>2. The IArmResource</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/2-iarm-resource/</guid><description>In this exercise, we&amp;rsquo;ll migrate our code from the previous step directly into the Farmer codebase.
Step 2.1: Migrating to IArmResource Now that you know that your resource model produces the correct Json value when passed into Farmer, we can now create a formal IArmResource statically that contains the &amp;ldquo;parameterised&amp;rdquo; parts of the above function, such as name, sku and adminUserEnabled and properly take part in the Farmer pipeline. This record should use types as required to capture e.</description></item><item><title>Container Group</title><link>https://compositionalit.github.io/farmer/api-overview/resources/container-group/</link><pubDate>Thu, 30 Apr 2020 19:30:59 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/container-group/</guid><description>Overview The Container Group builder is used to create Azure Container Group instances.
Container Group (Microsoft.ContainerInstance/containerGroups) Builder Keywords Keyword Purpose name Sets the name of the Container Group instance. image Sets the container image. ports Sets the ports the container exposes. cpu_cores Sets the maximum CPU cores the container may use. memory Sets the maximum gigabytes of memory the container may use.</description></item><item><title>Container Registry</title><link>https://compositionalit.github.io/farmer/api-overview/resources/container-registry/</link><pubDate>Thu, 30 Apr 2020 19:10:46 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/container-registry/</guid><description>Overview The Container Registry builder is used to create Azure Container Registry (ACR) instances.
Container Registry (Microsoft.ContainerRegistry/registries) Builder Keywords Keyword Purpose name Sets the name of the Container Registry instance. sku Sets the SKU of the instance. Defaults to Basic. enable_admin_user The value that indicates whether the admin user is enabled. Example open Farmer open Farmer.</description></item><item><title>Cognitive Services</title><link>https://compositionalit.github.io/farmer/api-overview/resources/cognitive-services/</link><pubDate>Fri, 10 Apr 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/cognitive-services/</guid><description>Overview The Cognitive Services builder is used to create Azure Cognitive Services instances.
Cognitive Services (Microsoft.CognitiveServices/accounts) Builder Keywords Keyword Purpose name Sets the name of the Cognitive Services instance. sku Sets the SKU of the instance. Defaults to F0 (free). api Specifies the API to use for the service instance. Defaults to AllInOne. Example open Farmer open Farmer.</description></item><item><title>Parameters and Variables</title><link>https://compositionalit.github.io/farmer/api-overview/parameters/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/parameters/</guid><description>ARM templates support the idea both of parameterisation of templates and of the use of variables within a template for e.g. placeholders and re-using values.
Farmer, by design, has only limited support for parameters and no support for variables. We don&amp;rsquo;t plan on adding rich support for either of these for the following reasons:
We want to keep the Farmer codebase simple for maintainers We want to keep the Farmer API simple for users We want to keep the generated ARM templates as readable as possible We feel that instead of trying to embed conditional logic and program flow directly inside ARM templates in JSON, if you wish to parameterise your template that you should use a real programming language to do that: in this case, F#.</description></item><item><title>Cosmos DB</title><link>https://compositionalit.github.io/farmer/api-overview/resources/cosmosdb/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/cosmosdb/</guid><description>Overview The CosmosDb package containers two builders, used to create databases and containers.
CosmosDB Account (Microsoft.DocumentDb/databaseAccounts) CosmosDB SQL (&amp;quot;Microsoft.DocumentDB/databaseAccounts/sqlDatabases) CosmosDB SQL Container (Microsoft.DocumentDb/databaseAccounts/sqlDatabases/containers) There is currently only support for document databases (the so-called &amp;ldquo;SQL API&amp;rdquo;), with support for Gremlin, Table and Cassandra data models planned.
Cosmos DB Builder The CosmosDB builder abstracts the idea of account and database into one. If you wish to &amp;ldquo;re-use&amp;rdquo; an already-created Cosmos DB account, use link_to_account keyword - no account will be created and the database will be attached to the existing one.</description></item><item><title>Deploying to Azure</title><link>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</guid><description>Introduction In this exercise, you&amp;rsquo;ll update the application to deploy the generated ARM template to Azure directly from Farmer.
Farmer generates normal ARM templates. You use all of the standard mechanisms for deploying ARM templates such as through the portal, Powershell, .NET or Azure CLI etc. This tutorial shows you a simple way to deploy templates from your development machine directly from within F#.
Install the Azure CLI If you haven&amp;rsquo;t done so already, install the Azure CLI on your machine.</description></item><item><title>3. The IBuilder interface</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/3-ibuilder/</guid><description>Sometimes, ARM resources are captured at a level of abstraction that is too low for us to reason about. In such cases, we
An IBuilder is not only even easier to consume by users than the F# record above, but can create multiple IArmResource objects at once. This is especially useful for more complex resources that tend to come in groups of two or three together - for example, Server Farm and Web Apps, or Cosmos DB Accounts, Databases and Containers.</description></item><item><title>Data Lake</title><link>https://compositionalit.github.io/farmer/api-overview/resources/data-lake/</link><pubDate>Thu, 11 Jun 2020 00:55:30 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/data-lake/</guid><description>Overview The Data Lake builder is used to create Azure Data Lake instances.
Data Lake (Microsoft.DataLakeStore/accounts) Builder Keywords Keyword Purpose name Sets the name of the Cognitive Services instance. sku Sets the SKU of the instance. Defaults to Consumption. enable_encryption Turns on data lake encryption. Example open Farmer open Farmer.Builders let myLake = dataLake { name &amp;#34;myDataLake&amp;#34; sku DataLake.</description></item><item><title>ARM Expressions</title><link>https://compositionalit.github.io/farmer/api-overview/expressions/</link><pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/expressions/</guid><description>ARM template expressions are a way of safely storing string values which contain expressions that are evaluated at deployment time by the Azure. ARM expressions can also contain a set of predefined functions supported by the ARM runtime.
Farmer understands how to use ARM expressions and provides functionality to correctly wrap and unwrap them as raw strings into a JSON template.
For manipulation of literal values that are known on the client, you will not need to use ARM expressions.</description></item><item><title>The Farmer .NET Template</title><link>https://compositionalit.github.io/farmer/quickstarts/template/</link><pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate><guid>https://compositionalit.github.io/farmer/quickstarts/template/</guid><description>Farmer comes with a .NET template that makes getting started easy.
Creating a basic Farmer app The easiest way to create a Farmer app is to use the Farmer .NET Template.
dotnet new -i Farmer.Template dotnet new Farmer You only have to install the template once on your machine!
This creates a new dotnet application solution and project that looks by default as follows:
open Farmer open Farmer.Builders let deployment = arm { location Location.</description></item><item><title>4. Providing Builder syntax</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/4-creating-builder-syntax/</guid><description>If you want to get the nice json-like syntax for your configuration record, you need to implement a separate class which contains a set of methods that act on the Configuration Record that you created previously - one for each keyword that you want.
If you need have not built your own computation expression before, here are some resources to brush up:
Office microsoft docs The &amp;ldquo;Computation Expressions&amp;rdquo; series Workshop Step 4.</description></item><item><title>ExpressRoute</title><link>https://compositionalit.github.io/farmer/api-overview/resources/expressroute/</link><pubDate>Sun, 07 Jun 2020 21:57:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/expressroute/</guid><description>Overview An ExpressRoute circuit is a dedicated link to Azure to provide communication with Azure services without traversing the Internet. It requires some coordination with a networking provider for these circuits, so some information, such as the service provider and peering location must be obtained from Azure reference documentation. The ExpressRoute builder creates an ExpressRoute circuit and enables Azure private peering and Microsoft peering.
ExpressRoute Namespace (Microsoft.Network/expressRouteCircuits) Builder Keywords Applies To Keyword Purpose ExpressRoute service_provider Connectivity service provider from Azure reference documentation ExpressRoute peering_location Connectivity peering location from Azure reference documentation ExpressRoute tier Standard or Premium ExpressRoute family Metered or Unlimited data ExpressRoute bandwidth Bandwidth in Mbps for the circuit ExpressRoute add_peering Peering details for the circuit - can add Azure Private and Microsoft peerings Peering peering_type A network CIDR block of 4 IP addresses (/30) for the ExpressRoute primary circuit Peering peer_asn Peer Autonomous System Number - this is a uniquely assigned number for the peer network, typically provided by the service provider in agreement with Microsoft Peering azure_asn Azure Autonomous System Number - Microsoft oftent uses AS 12076 for Azure public, Azure private and Microsoft peering Peering primary_prefix A network CIDR block of 4 IP addresses (/30) for the ExpressRoute primary circuit Peering secondary_prefix A network CIDR block of 4 IP addresses (/30) for the ExpressRoute secondary circuit Peering vlan A unique VLAN ID for the peering Peering shared_key An optional shared key the service provider may specify for the peering Example open Farmer open Farmer.</description></item><item><title>Event Hub</title><link>https://compositionalit.github.io/farmer/api-overview/resources/eventhub/</link><pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/eventhub/</guid><description>Overview The Event Hub builder creates event hub namespaces, event hubs, consumer groups and authorization rules in a single builder.
Event Hub Namespace (Microsoft.EventHub/namespaces) Event Hub (Microsoft.EventHub/namespaces/eventhubs) Consumer Group (Microsoft.EventHub/namespaces/eventhubs/consumergroups) Authorization Rule (Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules&amp;quot;) The Event Hub builder works in a similar fashion to the web app builder in that it automatically creates the host (in this case, the event hub namespace) when creating the event hub. If you wish to create multiple hubs in the same namespace, configure the namespace-level properties in the first event hub; subsequent event hubs should link to the namespace of the hub created by the first hub.</description></item><item><title>5. Unit Testing</title><link>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/adding-resources/5-unit-testing/</guid><description>Usually I would be pro writing the tests before you implement all this but it is important to get a feel for the moving parts. At this point you may want to write some tests so you can iterate quickly on getting the structure of your ARM template correct.
The tests you will find in the project are black-box style tests that focus on the input of a resource and the output of the ARM template.</description></item><item><title>Functions</title><link>https://compositionalit.github.io/farmer/api-overview/resources/functions/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/functions/</guid><description>Overview The Functions builder is used to create Azure Functions accounts. It abstracts the App Host and Service Plan into the same component, and will also create and configure a linked App Insights resource. In addition, it will automatically create a backing storage account required by the functions runtime.
Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Storage Accounts (Microsoft.Storage/storageAccounts) Builder Keywords Keyword Purpose name Sets the name of the functions instance.</description></item><item><title>IOT Hub</title><link>https://compositionalit.github.io/farmer/api-overview/resources/iot-hub/</link><pubDate>Tue, 19 May 2020 23:14:14 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/iot-hub/</guid><description>Overview The IOT Hub builder creates IOT Hub and linked Provision Services.
IOT Hubs (Microsoft.Devices/IotHubs) Provisioning Services (Microsoft.Devices/provisioningServices) Builder Keywords Keyword Purpose name Specifies the name of the IOT Hub sku Sets the SKU of the IOT Hub capacity Sets the name of the capacity for the IOT Hub instance partition_count Sets the name of the SKU/Tier for the IOT Hub instance retention_days Sets the name of the SKU/Tier for the IOT Hub instance enable_device_provisioning Sets the name of the SKU/Tier for the IOT Hub instance Configuration Members Member Purpose GetKey Returns an ARM expression to retrieve the IOT Hub key for a specific policy e.</description></item><item><title>Key Vault</title><link>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</guid><description>Overview The KeyVault package contains three builders, for the different components used by KeyVault: One for access policies, one for secrets, and one for the overall keyvault container.
KeyVault (Microsoft.KeyVault/vaults) Secrets (Microsoft.KeyVault/vaults/secrets) Secret Builder The secret builder allows you to store secrets into key vault. Values for a secret are passed by Secure String parameters.
Keyword Purpose name Sets the name of the secret.</description></item><item><title>Maps</title><link>https://compositionalit.github.io/farmer/api-overview/resources/maps/</link><pubDate>Tue, 26 May 2020 11:24:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/maps/</guid><description>Overview The Maps builder creates Azure Maps accounts.
Maps (Microsoft.Maps/accounts) Builder Keywords Keyword Purpose name Sets the name of the Azure Maps account. sku Sets the sku of the Azure Maps account. Example open Farmer open Farmer.Builders let myMaps = maps { name &amp;#34;mymaps&amp;#34; sku Maps.S0 }</description></item><item><title>Redis Cache</title><link>https://compositionalit.github.io/farmer/api-overview/resources/redis/</link><pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/redis/</guid><description>Overview The Redis builder creates managed Redis Cache accounts.
Redis (Microsoft.Cache/redis) Builder Keywords Keyword Purpose name Sets the name of the Redis cache instance. sku Sets the sku of the Redis cache instance. capacity Sets the capacity level of the Redis cache instance, should be between 1-6 - see here. enable_non_ssl_port Enabled access to the cache over the non-SSL port.</description></item><item><title>SignalR</title><link>https://compositionalit.github.io/farmer/api-overview/resources/signalr/</link><pubDate>Mon, 01 Jun 2020 11:13:00 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/signalr/</guid><description>Overview The SignalR builder creates SignalR services.
SignalR Service (Microsoft.SignalRService/signalR) Builder Keywords Keyword Purpose name Sets the name of the SignalR service. sku Sets the sku of the SignalR service. capacity Sets the capacity of the SignalR service. (optional) allowed_origins Sets the allowed origins of the SignalR service. (optional) Configuration Members Member Purpose Key Returns an ARM expression to retrieve the primary connection string of the service.</description></item><item><title>PostgreSQL</title><link>https://compositionalit.github.io/farmer/api-overview/resources/postgresql/</link><pubDate>Fri, 22 May 2020 07:14:00 +0200</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/postgresql/</guid><description>Overview The PostreSQL builder is used to create Azure Database Service for PostreSQL servers and databases. Every SQL PostgreSQL server you create will automatically create a SecureString parameter for the admin account password. If you wish to create a PostgreSQL database attached to an existing server, use the link_to_server keyword and supply the resource name of the existing server.
PostgreSQL server (Microsoft.DBforPostgreSQL/servers) Builder keywords Applies To Keyword Purpose Server server_name (string) Sets the name of the SQL server.</description></item><item><title>Search</title><link>https://compositionalit.github.io/farmer/api-overview/resources/search/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/search/</guid><description>Overview The Search builder creates storage accounts and their associated containers.
Search (Microsoft.Search/searchServices) Builder Keywords Keyword Purpose name Sets the name of the Azure Search instance. sku Sets the sku of the Azure Search instance. replicas Sets the replica count of the Azure Search instance. partitions Sets the number of partitions of the Azure Search instance.</description></item><item><title>Service Bus</title><link>https://compositionalit.github.io/farmer/api-overview/resources/service-bus/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/service-bus/</guid><description>Overview The Service Bus builder creates service bus namespaces and their associated queues.
Service Bus Namespaces (Microsoft.ServiceBus/namespaces) Builder Keywords Applies To Keyword Purpose Queue name The name of the queue. Queue lock_duration_minutes The length of time that a lock can be held on a message. Queue max_delivery_count The maximum number of times a message can be delivered before dead lettering.</description></item><item><title>SQL Azure</title><link>https://compositionalit.github.io/farmer/api-overview/resources/sql/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/sql/</guid><description>Overview The SQL Azure module contains two builders - sqlServer, used to create SQL Azure servers, and sqlDb, used to create individual databases. It supports features such as encryption, firewalls and automatic pool creation. Every SQL Azure server you create will automatically create a SecureString parameter for the admin account password.
SQL Azure server (Microsoft.Sql/servers) SQL Server Builder Keywords Keyword Purpose server_name Sets the name of the SQL server.</description></item><item><title>Storage Account</title><link>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</guid><description>Overview The Storage Account builder creates storage accounts and their associated containers.
Storage Accounts (Microsoft.Storage/storageAccounts) Storage Containers (blobServices/containers) Builder Keywords Keyword Purpose name Specifies the name of the storage account sku Sets the SKU of the storage account add_public_container Adds a general-purpose public storage container add_private_container Adds a general-purpose private storage container add_blob_container Adds a general-purpose private blob container Configuration Members Member Purpose Key Returns an ARM expression to retrieve the storage account&amp;rsquo;s primary connection string.</description></item><item><title>Virtual Machine</title><link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</guid><description>Overview The Virtual Machine builder creates a fully configured virtual machine and all its required child resources.
Virtual Machines (Microsoft.Compute/virtualMachines) Virtual Networks (Microsoft.Network/virtualNetworks) IP Addresses (Microsoft.Network/publicIPAddresses) Network Interfaces (Microsoft.Network/networkInterfaces) Storage Accounts (Microsoft.Storage/storageAccounts) In addition, every VM you create will add a SecureString parameter to the ARM template, whose name follows the pattern password-for-[virtual machine name].
Builder Keywords Keyword Purpose name Sets the name of the VM.</description></item><item><title>Web App</title><link>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</link><pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate><guid>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</guid><description>Overview The Web App builder is used to create Azure App Service accounts. It abstracts the Service Plan into the same component, and will also create and configure a linked App Insights resource. If you wish to create a website that connects to an existing service plan, use the link_to_service_plan keyword and provide the resource name of the service plan to connect to.
Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.</description></item><item><title/><link>https://compositionalit.github.io/farmer/contributing/creating-multiple-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/contributing/creating-multiple-resources/</guid><description/></item></channel></rss>